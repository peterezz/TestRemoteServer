// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestRemoteServer.Models
{
    public partial class ePrime_Test_2019ddasmfet7Context : DbContext
    {
        public ePrime_Test_2019ddasmfet7Context()
        {
        }

        public ePrime_Test_2019ddasmfet7Context(DbContextOptions<ePrime_Test_2019ddasmfet7Context> options)
            : base(options)
        {
        }

        public virtual DbSet<CountryRegion> CountryRegion { get; set; }
        public virtual DbSet<Farm> Farm { get; set; }
        public virtual DbSet<Plot> Plot { get; set; }
        public virtual DbSet<Variety> Variety { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDefaultSchema("dbtest_user_asm1217ddasmfed1402a77s");

            modelBuilder.Entity<CountryRegion>(entity =>
            {
                entity.ToTable("CountryRegion", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CountryCode).HasMaxLength(10);

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.NameAr)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Name_AR");

                entity.Property(e => e.NameEn)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Name_EN");

                entity.Property(e => e.NumCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Farm>(entity =>
            {
                entity.ToTable("Farm", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Gpsx)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("GPSX");

                entity.Property(e => e.Gpsy)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("GPSY");

                entity.Property(e => e.HarvestDate).HasColumnType("datetime");

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.NameAr)
                    .HasMaxLength(200)
                    .HasColumnName("Name_AR");

                entity.Property(e => e.NameEn)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Name_EN");

                entity.Property(e => e.ParentFarmId)
                    .HasColumnName("ParentFarmID")
                    .HasComment("This refers to the Farm which has Pack House and will import the farm (without packhouse) plots to can print");

                entity.Property(e => e.WithoutPackHouse).HasComment("If this farm(Ex:Farm1) has no pack house, Another farm(has Pack House)(Farm2) will import Farm1 plots to Farm2 plots");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Farm)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Farm_CountryRegion");

                entity.HasOne(d => d.ParentFarm)
                    .WithMany(p => p.InverseParentFarm)
                    .HasForeignKey(d => d.ParentFarmId)
                    .HasConstraintName("FK_Farm_Farm");
            });

            modelBuilder.Entity<Plot>(entity =>
            {
                entity.ToTable("Plot", "dbo");

                entity.HasComment("Per Acre");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CurrentWeight).HasComment("Current Weight is the weight which changes in every packing, and must be less than Estimate Weight \r\nUnit is in \"Metric Ton\"");

                entity.Property(e => e.EstimateWeight).HasComment("In \"Metric Ton\"");

                entity.Property(e => e.FarmId).HasColumnName("FarmID");

                entity.Property(e => e.MaxWeight).HasComment("If Weight reach MAX, this Grower will be blocked.\r\nThe unit of weight is in \"Metric Ton\"");

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.NameAr)
                    .HasMaxLength(50)
                    .HasColumnName("Name_AR");

                entity.Property(e => e.NameEn)
                    .HasMaxLength(50)
                    .HasColumnName("Name_EN");

                entity.Property(e => e.PlantingYear).HasColumnType("datetime");

                entity.Property(e => e.Size).HasComment("Per Acre");

                entity.Property(e => e.VarietyId).HasColumnName("VarietyID");

                entity.Property(e => e.VineSpacing).HasMaxLength(50);

                entity.HasOne(d => d.Farm)
                    .WithMany(p => p.Plot)
                    .HasForeignKey(d => d.FarmId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Plot_Farm");

                entity.HasOne(d => d.Variety)
                    .WithMany(p => p.Plot)
                    .HasForeignKey(d => d.VarietyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Plot_Variety");
            });

            modelBuilder.Entity<Variety>(entity =>
            {
                entity.ToTable("Variety", "dbo");

                entity.HasIndex(e => e.NameEn, "IX_Variety")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Color)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.NameAr)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Name_AR");

                entity.Property(e => e.NameEn)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Name_EN");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}